{"version":3,"sources":["firebase.js","components/ChatRoom.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","ChatRoom","updateData","e","setState","target","name","value","submitMessage","a","message","id","state","messages","length","user","text","collection","doc","set","disabledInput","disabled","onSnapshot","querySnapshot","getMessages","forEach","push","data","currentMessages","this","map","i","key","className","style","width","height","overflowY","type","placeholder","onChange","onBlur","onClick","Component","App","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"gWAeaA,G,MADFC,IAASC,cAVC,CACpBC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,8CAIaC,aC6GNC,E,kDAtHd,aAAe,IAAD,8BACb,gBA2BDC,WAAa,SAACC,GACb,EAAKC,SAAL,eACED,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SA9Bd,EAiCdC,cAjCc,sBAiCE,4BAAAC,EAAA,6DACTC,EAAU,CACfC,GAAI,EAAKC,MAAMC,SAASC,OAAS,EACjCC,KAAM,EAAKH,MAAMG,KACjBC,KAAM,EAAKJ,MAAMF,SAJH,SAOTpB,EAAG2B,WAAW,YAAYC,IAA1B,UAAiCR,EAAQC,KAAMQ,IAAIT,GAP1C,OAgBf,EAAKN,SAAS,CACbM,QAAS,KAjBK,2CAjCF,EAsDdU,cAAgB,SAACjB,GAChBA,EAAEE,OAAOgB,UAAW,GArDpB,EAAKT,MAAQ,CACZG,KAAM,GACNL,QAAS,GACTG,SAAU,IALE,E,qMAaPvB,EAAG2B,WAAW,YAAYK,YAAW,SAACC,GAC3C,IAAMC,EAAc,GAEpBD,EAAcE,SAAQ,SAACP,GACtBM,EAAYE,KAAZ,eAAsBR,EAAIS,YAGR,MAAfH,GACH,EAAKpB,SAAS,CACbS,SAAUW,O,gIAqCb,IAAMI,EAAkBC,KAAKjB,MAAMC,SAASiB,KAAI,SAACpB,EAASqB,GACzD,OACC,wBACCC,IAAKtB,EAAQC,GACbsB,UAAU,yDAEV,uBAAGA,UAAU,QAAQvB,EAAQM,MAC7B,uBAAGiB,UAAU,gCAAgCvB,EAAQK,UAKxD,OACC,yBAAKkB,UAAU,QACd,yBAAKA,UAAU,eACd,wBAAIA,UAAU,+BAAd,eAGD,yBAAKA,UAAU,kBACd,wBACCA,UAAU,kBACVC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAASC,UAAW,SAEnDT,IAIH,yBAAKK,UAAU,oBACd,2BACC3B,KAAK,OACLK,GAAG,OACH2B,KAAK,OACLC,YAAY,oBACZN,UAAU,eACVO,SAAUX,KAAK3B,WACfK,MAAOsB,KAAKjB,MAAMG,KAClB0B,OAAQZ,KAAKT,gBAEd,2BACCd,KAAK,UACLK,GAAG,UACH2B,KAAK,OACLC,YAAY,kBACZN,UAAU,eACVO,SAAUX,KAAK3B,WACfK,MAAOsB,KAAKjB,MAAMF,UAEnB,4BACCuB,UAAU,4BACVS,QAASb,KAAKrB,eAFf,qB,GA3GkBmC,aCuBRC,MAtBf,WACC,OACC,6BACC,yBAAKX,UAAU,iCACd,yBAAKA,UAAU,aACd,uBAAGY,KAAK,IAAIZ,UAAU,gBAAtB,gBAMF,yBAAKA,UAAU,iBACd,yBAAKA,UAAU,OACd,yBAAKA,UAAU,oBACd,kBAAC,EAAD,WCRca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDuHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMrD,c","file":"static/js/main.d737cc6f.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore'\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n\tapiKey: 'AIzaSyD_3br-cno6y9prgBKxn9pwmHVholZ92Nc',\n\tauthDomain: 'react-chat-57805.firebaseapp.com',\n\tdatabaseURL: 'https://react-chat-57805.firebaseio.com',\n\tprojectId: 'react-chat-57805',\n\tstorageBucket: 'react-chat-57805.appspot.com',\n\tmessagingSenderId: '760181152117',\n\tappId: '1:760181152117:web:44a17e54164daf6a629b3c',\n}\n// Initialize Firebase\nconst fb = firebase.initializeApp(firebaseConfig)\nexport const db = fb.firestore()\n","import React, { Component } from 'react'\n\n// db\nimport { db } from '../firebase'\n\nclass ChatRoom extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\tuser: '',\n\t\t\tmessage: '',\n\t\t\tmessages: [\n\t\t\t\t/* { id: 1, user: 'JCode', text: 'messageOne' },\n\t\t\t\t{ id: 2, user: 'JersiDev', text: 'messageTwo' }, */\n\t\t\t],\n\t\t}\n\t}\n\n\tasync componentDidMount() {\n\t\tawait db.collection('messages').onSnapshot((querySnapshot) => {\n\t\t\tconst getMessages = []\n\n\t\t\tquerySnapshot.forEach((doc) => {\n\t\t\t\tgetMessages.push({ ...doc.data() })\n\t\t\t})\n\n\t\t\tif (getMessages != null) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tmessages: getMessages,\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t}\n\n\tupdateData = (e) => {\n\t\tthis.setState({\n\t\t\t[e.target.name]: e.target.value,\n\t\t})\n\t}\n\tsubmitMessage = async () => {\n\t\tconst message = {\n\t\t\tid: this.state.messages.length + 1,\n\t\t\tuser: this.state.user,\n\t\t\ttext: this.state.message,\n\t\t}\n\n\t\tawait db.collection('messages').doc(`${message.id}`).set(message)\n\n\t\t/* let listMessages = this.state.messages\n\t\tlistMessages.push(message)\n\n\t\tthis.setState({\n\t\t\tmessages: listMessages,\n\t\t}) */\n\n\t\tthis.setState({\n\t\t\tmessage: '',\n\t\t})\n\t}\n\n\tdisabledInput = (e) => {\n\t\te.target.disabled = true\n\t}\n\n\trender() {\n\t\tconst currentMessages = this.state.messages.map((message, i) => {\n\t\t\treturn (\n\t\t\t\t<li\n\t\t\t\t\tkey={message.id}\n\t\t\t\t\tclassName='list-group-item list-group-item-action border-warning'\n\t\t\t\t>\n\t\t\t\t\t<p className='mb-1'>{message.text}</p>\n\t\t\t\t\t<p className='text-right text-white-50 m-0'>{message.user}</p>\n\t\t\t\t</li>\n\t\t\t)\n\t\t})\n\n\t\treturn (\n\t\t\t<div className='card'>\n\t\t\t\t<div className='card-header'>\n\t\t\t\t\t<h1 className='h3 text-center text-success'>Comunicate</h1>\n\t\t\t\t</div>\n\n\t\t\t\t<div className='card-body px-5'>\n\t\t\t\t\t<ul\n\t\t\t\t\t\tclassName='list-group px-3'\n\t\t\t\t\t\tstyle={{ width: '100%', height: '230px', overflowY: 'auto' }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{currentMessages}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\n\t\t\t\t<div className='card-footer px-5'>\n\t\t\t\t\t<input\n\t\t\t\t\t\tname='user'\n\t\t\t\t\t\tid='user'\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tplaceholder='Write an username'\n\t\t\t\t\t\tclassName='form-control'\n\t\t\t\t\t\tonChange={this.updateData}\n\t\t\t\t\t\tvalue={this.state.user}\n\t\t\t\t\t\tonBlur={this.disabledInput}\n\t\t\t\t\t/>\n\t\t\t\t\t<input\n\t\t\t\t\t\tname='message'\n\t\t\t\t\t\tid='message'\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tplaceholder='Write a message'\n\t\t\t\t\t\tclassName='form-control'\n\t\t\t\t\t\tonChange={this.updateData}\n\t\t\t\t\t\tvalue={this.state.message}\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='btn-block btn btn-success'\n\t\t\t\t\t\tonClick={this.submitMessage}\n\t\t\t\t\t>\n\t\t\t\t\t\tSend Mesage\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ChatRoom\n","import React from 'react'\nimport './App.css'\n\n// components\nimport ChatRoom from './components/ChatRoom'\n\nfunction App() {\n\treturn (\n\t\t<div>\n\t\t\t<nav className='navbar navbar-dark bg-primary'>\n\t\t\t\t<div className='container'>\n\t\t\t\t\t<a href='/' className='navbar-brand'>\n\t\t\t\t\t\tChat React\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</nav>\n\n\t\t\t<div className='container p-5'>\n\t\t\t\t<div className='row'>\n\t\t\t\t\t<div className='col-md-6 mx-auto'>\n\t\t\t\t\t\t<ChatRoom />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport './firebase'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}